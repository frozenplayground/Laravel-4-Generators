<?php

//use Namespace\To\$MODEL$RepositoryInterface

class $NAME$ extends \BaseController
{
	protected $repo;

    public function __construct($MODEL$RepositoryInterface $repo)
    {
        $this->repo = $repo;
    }

	/**
	 * Display a listing of $COLLECTION$
	 *
	 * @return Response
	 */
	public function index()
	{
        $sort = Input::get('sort') ?: 'id';
        $order = Input::get('order') ?: 'asc';
        $query = trim(Input::get('query'));
        $eager = null;
        $params = compact('sort', 'order', 'eager', 'query');

		$$COLLECTION$ = $this->repo->all($params);

		return View::make('$COLLECTION$.index', compact('$COLLECTION$') + $params);
	}

	/**
	 * Show the form for creating a new $RESOURCE$
	 *
	 * @return Response
	 */
	public function create()
	{
		return View::make('$COLLECTION$.create');
	}

	/**
	 * Store a newly created $RESOURCE$ in storage.
	 *
	 * @return Response
	 */
	public function store()
	{
        $$RESOURCE$ = $this->repo->create(Input::all());

        if (! $$RESOURCE$) {
            return Redirect::back()->withErrors($this->repo->errors())->withInput();
        }

		return Redirect::route('$COLLECTION$.index');
	}

	/**
	 * Display the specified $RESOURCE$.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($id)
	{
		$$RESOURCE$ = $this->repo->find($id);

		return View::make('$COLLECTION$.show', compact('$RESOURCE$'));
	}

	/**
	 * Show the form for editing the specified $RESOURCE$.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
		$$RESOURCE$ = $this->repo->find($id);

		return View::make('$COLLECTION$.edit', compact('$RESOURCE$'));
	}

	/**
	 * Update the specified $RESOURCE$ in storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function update($id)
	{
        if (! $this->repo->update($id, Input::all())) {
            return Redirect::back()->withErrors($this->repo->errors())->withInput();
        }

        return Redirect::route('$COLLECTION$.show', $id);
	}

	/**
	 * Remove the specified $RESOURCE$ from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id)
	{
		$this->repo->destroy($id);

		return Redirect::route('$COLLECTION$.index');
	}

}
